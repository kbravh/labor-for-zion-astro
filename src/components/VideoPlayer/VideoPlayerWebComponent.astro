---

---

<script>
  import 'media-chrome';
  import 'hls-video-element';
  import 'media-chrome/menu';

  class VideoPlayer extends HTMLElement {
    static get observedAttributes() {
      return ['aspectratio'];
    }

    playerDiv: HTMLDivElement;
    hlsVideo: HTMLElement;

    constructor() {
      super();
      this.attachShadow({ mode: 'open' });

      const style = document.createElement('style');
      style.textContent = `
      .player {
        width: 100%;
      }

      /* Since our breakpoints implementation is a "mobile-first" approach, we'll hide the "desktop only" items by default */
      media-controller .desktop-only {
        --media-control-display: none;
      }

      /* Then, when the <media-controller> size is larger, we'll show the "desktop only" components and hide the "mobile only" ones */
      media-controller[breakpointmd] .desktop-only {
        --media-control-display: unset;
      }

      media-controller[breakpointmd] .mobile-only {
        --media-control-display: none;
      }

      media-controller [slot='centered-chrome'] {
        border-radius: 10px;
        --media-control-padding: 2px;
        --media-control-height: 40px;
        background: var(--media-secondary-color);
      }

      media-controller [slot='centered-chrome'] > * {
        --media-secondary-color: none;
      }

      media-controller [slot='centered-chrome'] > :first-child {
        border-radius: 10px 0px 0px 10px;
      }

      media-controller [slot='centered-chrome'] > :last-child {
        border-radius: 0px 10px 10px 0px;
      }

      /* Do not show the volume range unless volume control is available (e.g. many mobile devices require device-level control for volume) */
      media-volume-range[mediavolumeunavailable] {
        display: none;
      }

      /* Do not show the captions button if there are no captions for the media */
      media-captions-button:not([mediasubtitleslist]) {
        display: none;
      }
    `;

      const playerDiv = document.createElement('div');
      this.playerDiv = playerDiv;
      playerDiv.classList.add('player');

      const mediaController = document.createElement('media-controller');

      const hlsVideo = document.createElement('hls-video');
      this.hlsVideo = hlsVideo;
      hlsVideo.setAttribute('slot', 'media');
      hlsVideo.setAttribute('crossorigin', '');

      const renditionMenu = document.createElement('media-rendition-menu');
      renditionMenu.setAttribute('hidden', '');
      renditionMenu.setAttribute('anchor', 'auto');

      const mobileControls = document.createElement('div');
      mobileControls.setAttribute('slot', 'centered-chrome');
      mobileControls.classList.add('mobile-only');
      mobileControls.innerHTML = `
      <media-seek-backward-button></media-seek-backward-button>
      <media-play-button></media-play-button>
      <media-seek-forward-button></media-seek-forward-button>
      `;

      const controlBar = document.createElement('media-control-bar');
      controlBar.innerHTML = `
      <media-play-button class="desktop-only"></media-play-button>
      <media-seek-backward-button class="desktop-only"></media-seek-backward-button>
      <media-seek-forward-button class="desktop-only"></media-seek-forward-button>
      <media-mute-button></media-mute-button>
      <media-volume-range></media-volume-range>
      <media-time-display></media-time-display>
      <media-time-range></media-time-range>
      <media-playback-rate-button></media-playback-rate-button>
      <media-captions-button></media-captions-button>
      <media-airplay-button></media-airplay-button>
    `;

      mediaController.appendChild(hlsVideo);
      mediaController.appendChild(renditionMenu);
      mediaController.appendChild(mobileControls);
      mediaController.appendChild(controlBar);

      playerDiv.appendChild(mediaController);

      this.shadowRoot?.append(style, playerDiv);
    }

    connectedCallback() {
      this.updateAspectRatio();
      this.updateSource();

      // Observe changes to child nodes to update the source if needed
      const observer = new MutationObserver(() => this.updateSource());
      observer.observe(this, { childList: true, subtree: true });
    }

    attributeChangedCallback(name: string) {
      if (name === 'aspectratio') {
        this.updateAspectRatio();
      }
    }

    updateAspectRatio() {
      const aspectRatio = this.getAttribute('aspectratio') || '16 / 9';
      this.playerDiv.style.aspectRatio = aspectRatio;
    }

    updateSource() {
      const source = this.querySelector('source');
      if (source) {
        const src = source.getAttribute('src');
        if (src) this.hlsVideo.setAttribute('src', src);
      }
    }
  }

  customElements.define('video-player', VideoPlayer);
</script>
