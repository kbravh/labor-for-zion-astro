---
import {readFileSync} from 'fs';
import {
  Backlink,
  addLinks,
  getBacklinks,
  getSlugToPathMap,
  getTitleAndSlugMaps,
} from '../../utils/mdUtils';
// @ts-ignore - untyped dependency
import matter from 'gray-matter';
import MarkdownIt from 'markdown-it';
import MarkdownItFootnote from 'markdown-it-footnote';
import {Frontmatter} from '../../validation/md';
import {dedupeArray} from '../../utils/array';
import NoteLayout from '../../layouts/NoteLayout.astro';
import EmptyNoteLayout from '../../layouts/EmptyNoteLayout.astro';

const md = new MarkdownIt({
  html: true,
  linkify: true,
  typographer: true,
}).use(MarkdownItFootnote);

const {slug} = Astro.params;
if (!slug) {
  throw new Error('No slug provided');
}

const slugToPathMap = getSlugToPathMap();
const {titleToSlug, slugToTitle} = getTitleAndSlugMaps();
const titlesWithBacklinks = getBacklinks();

const filePath = slugToPathMap[slug];

let noteData:
  | {
      content: string;
      frontmatter: Frontmatter;
      slug: string;
      backlinks: Backlink[];
      type: 'note';
    }
  | {title: string; slug: string; backlinks: Backlink[]; type: 'empty'};

// if we have a filepath, this is a real page and we can parse and prepare
if (filePath) {
  const source = readFileSync(filePath, 'utf-8');
  const document = matter(source);
  const text = addLinks(titleToSlug, document.content);
  const content = md.render(text);
  const frontmatter = document.data;
  const parsedFrontmatter = Frontmatter.parse(frontmatter);

  // Fill an array with all backlinks that reference this title or its aliases
  let backlinks = [...(titlesWithBacklinks[parsedFrontmatter.title] ?? [])];
  for (const alias of parsedFrontmatter.aliases ?? []) {
    backlinks = [...backlinks, ...(titlesWithBacklinks[alias] ?? [])];
  }

  noteData = {
    content,
    frontmatter: parsedFrontmatter,
    slug,
    backlinks: dedupeArray(backlinks, backlink => backlink.slug),
    type: 'note',
  };
  // otherwise, let's check if it's an empty page referenced in other articles
} else {
  const title = slugToTitle[slug];
  if (!title) {
    // This page doesn't exist at all!
    return Astro.redirect('/404');
  }
  noteData = {
    slug,
    backlinks: titlesWithBacklinks[title] ?? [],
    type: 'empty',
    title,
  };
}

export function getStaticPaths() {
  const {slugToTitle} = getTitleAndSlugMaps();
  const paths = Object.keys(slugToTitle).map(slug => ({
    params: {slug},
  }));
  return paths;
}
---

{noteData.type === 'empty' && <EmptyNoteLayout {...noteData} />}
{noteData.type === 'note' && <NoteLayout {...noteData} />}
